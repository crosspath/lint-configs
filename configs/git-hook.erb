<%
  runner = answers[:package] == 'yarn' ? 'yarn run' : 'npx'
%>
#!/usr/bin/env ruby

<%- if hook == :post_commit %>
# Список файлов, добавленных и изменённых в последнем коммите.
command = 'git diff --name-only --diff-filter=ACMUX HEAD~1'
<%- elsif hook == :pre_push %>
# Список файлов, добавленных и изменённых в текущей ветке
# относительно `<%= answers[:branch] %>`.
commit  = `git merge-base origin/<%= answers[:branch] %> HEAD`
command = "git diff --name-only --diff-filter=ACMUX #{commit}"
<%- else %>
<% raise ArgumentError, hook %>
<%- end %>

files = `#{command}`.split(/\n/).map do |line|
  line.gsub(/\\\d{3}/) { |v| v[1..3].to_i(8).chr }.force_encoding('UTF-8')
end

def grep(files, extensions)
  files.select { |f| extensions.any? { |ext| f.end_with?(ext) } }
end

def strip_yarn_output(output)
  output.split("\n").reject { |line| line =~ /^yarn run|\$ / }.join("\n")
end

def step(title, command, files)
  return true if files.empty?
  output = `echo " >> #{title}"; #{command} "#{files.join('" "')}"`
  puts strip_yarn_output(output)
  $?.success? # $?.exitstatus == 0
end

parallel_steps = [
<%- if answers[:eclint_preset] == 'ruby' %>
  -> (files) do
    rb  = files.select { |f| File.extname(f) == '.rb' && f != 'db/schema.rb' }
    env = File.exist?('Gemfile.local') ? 'BUNDLE_GEMFILE=Gemfile.local' : ''
<%- if hook == :post_commit %>
    step('Rubocop', "#{env} bundle exec rubocop --auto-correct", rb)
<%- else %>
    step('Rubocop', "#{env} bundle exec rubocop", rb)
<%- end %>
  end,
<%- end %>
  -> (files) do
    js = grep(files, %w[.js .vue .js.erb])
<%- if hook == :post_commit %>
    step('ESLint', '<%= runner %> eslint --fix', js)
<%- else %>
    step('ESLint', '<%= runner %> eslint', js)
<%- end %>
  end,
  -> (files) do
    css = grep(files, %w[.css .sass .scss])
<%- if hook == :post_commit %>
    step('StyleLint', '<%= runner %> stylelint --fix', css)
<%- else %>
    step('StyleLint', '<%= runner %> stylelint', css)
<%- end %>
  end,
]

final_steps = [
  -> (files) do
<%- if hook == :post_commit %>
    step('ECLint', '<%= runner %> eclint fix', files)
<%- else %>
    step('ECLint', '<%= runner %> eclint check', files)
<%- end %>
  end,
]

<%- if hook == :post_commit %>
unless files.empty?
  threads = parallel_steps.map do |step|
    Thread.new(step, files) { |step, files| step.call(files) }
  end
  threads.each(&:join)
  final_steps.each { |step| step.call(files) }
end
exit 0
<%- else %>
if files.empty?
  exit 0
else
  threads = parallel_steps.map do |step|
    Thread.new(step, files) { |step, files| step.call(files) }
  end
  result = threads.all? { |t| t.join.value }
  result &&= final_steps.all? { |step| step.call(files) }
  exit(result ? 0 : 1)
  # 0: Всё хорошо.
  # 1: Есть ошибки в оформлении кода.
end
<%- end %>
